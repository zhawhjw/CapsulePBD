import * as THREE from "three";

export function distance(x1, y1, x2, y2) {
  return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

export function step(RADIUS, sceneEntities, world) {
  const AGENTSIZE = RADIUS * 2;
  const epsilon = 0.0001;
  const timestep = 0.03;
  const ITERNUM = 3;
  const agentLength = RADIUS / 2;

  // collision functions

  function rotateLineSegment(x1, y1, x2, y2, r) {
    // Calculate the center of the line segment
    const centerX = (x1 + x2) / 2;
    const centerY = (y1 + y2) / 2;

    // Translate the line segment so that its center is at the origin
    const x1p = x1 - centerX;
    const y1p = y1 - centerY;
    const x2p = x2 - centerX;
    const y2p = y2 - centerY;

    // Rotate the line segment about the origin
    const cosR = Math.cos(r);
    const sinR = Math.sin(r);
    const x1r = x1p * cosR - y1p * sinR;
    const y1r = x1p * sinR + y1p * cosR;
    const x2r = x2p * cosR - y2p * sinR;
    const y2r = x2p * sinR + y2p * cosR;

    // Translate the line segment back to its original position
    const newX1 = x1r + centerX;
    const newY1 = y1r + centerY;
    const newX2 = x2r + centerX;
    const newY2 = y2r + centerY;

    // Return the new endpoints of the line segment
    return [newX1, newY1, newX2, newY2];
  }

  function ClosestPointOnLineSegment(A, B, Point) {
    const AB = B.clone().sub(A);
    const t = AB.clone().dot(Point.clone().sub(A)) / AB.clone().dot(AB);
    return A.clone().add(
      AB.clone().multiplyScalar(Math.min((Math.max(t, 0), 1)))
    );
  }

  function is_colliding_torso(x11, y11, x12, y12, x21, y21, x22, y22) {
    // console.log(segments_distance(x11, y11, x12, y12, x21, y21, x22, y22));
    return (
      segments_distance(x11, y11, x12, y12, x21, y21, x22, y22) < 2 * RADIUS
    );
  }

  function segments_distance(x11, y11, x12, y12, x21, y21, x22, y22) {
    // distance between two segments in the plane:
    // one segment is (x11, y11) to (x12, y12)
    // the other is (x21, y21) to (x22, y22)

    if (segments_intersect(x11, y11, x12, y12, x21, y21, x22, y22)) return 0;

    // try each of the 4 vertices w/the other segment
    let distances = [
      point_segment_distance(x11, y11, x21, y21, x22, y22),
      point_segment_distance(x12, y12, x21, y21, x22, y22),
      point_segment_distance(x21, y21, x11, y11, x12, y12),
      point_segment_distance(x22, y22, x11, y11, x12, y12),
    ];
    return Math.min(...distances);
  }

  function segments_intersect(x11, y11, x12, y12, x21, y21, x22, y22) {
    // whether two segments in the plane intersect:
    // one segment is (x11, y11) to (x12, y12)
    // the other is (x21, y21) to (x22, y22)

    let dx1 = x12 - x11;
    let dy1 = y12 - y11;
    let dx2 = x22 - x21;
    let dy2 = y22 - y21;

    let delta = dx2 * dy1 - dy2 * dx1;
    if (delta === 0) return false; // parallel segments

    let s = (dx1 * (y21 - y11) + dy1 * (x11 - x21)) / delta;
    let t = (dx2 * (y11 - y21) + dy2 * (x21 - x11)) / -delta;

    return 0 <= s && s <= 1 && 0 <= t && t <= 1;
  }

  function point_segment_distance(px, py, x1, y1, x2, y2) {
    let dx = x2 - x1;
    let dy = y2 - y1;

    if (dx === 0 && dy === 0) {
      // the segment's just a point
      return Math.hypot(px - x1, py - y1);
    }

    // Calculate the t that minimizes the distance.
    let t = ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy);

    // See if this represents one of the segment's
    // end points or a point in the middle.
    if (t < 0) {
      dx = px - x1;
      dy = py - y1;
    } else if (t > 1) {
      dx = px - x2;
      dy = py - y2;
    } else {
      let near_x = x1 + t * dx;
      let near_y = y1 + t * dy;
      dx = px - near_x;
      dy = py - near_y;
    }
    return Math.hypot(dx, dy);
  }

  /*  -----------------------  */
  /*  TODO modify lines below  */
  /*  -----------------------  */
  function distanceConstraint(agent_i, agent_j, desiredDistance) {
    const agentCentroidDist = distance(
      agent_i.px,
      agent_i.pz,
      agent_j.px,
      agent_j.pz
    );
    const agentDist = agentCentroidDist - desiredDistance;
    const dir_x = (agent_j.px - agent_i.px) / agentCentroidDist;
    const dir_z = (agent_j.pz - agent_i.pz) / agentCentroidDist;
    const agent_i_scaler =
      ((0.1 * agent_i.invmass) / (agent_i.invmass + agent_j.invmass)) *
      agentDist;
    const agent_j_scaler =
      ((0.1 * agent_j.invmass) / (agent_i.invmass + agent_j.invmass)) *
      agentDist;
    if (Math.abs(agentDist) > epsilon) {
      agent_i.px += agent_i_scaler * dir_x;
      agent_i.pz += agent_i_scaler * dir_z;
      agent_j.px += -agent_j_scaler * dir_x;
      agent_j.pz += -agent_j_scaler * dir_z;
    }
  }

  function collisionConstraint(agent_i, agent_j) {
    const agentCentroidDist = distance(
      agent_i.px,
      agent_i.pz,
      agent_j.px,
      agent_j.pz
    );
    const agentDist = agentCentroidDist - AGENTSIZE;
    const dir_x = (agent_j.px - agent_i.px) / agentCentroidDist;
    const dir_z = (agent_j.pz - agent_i.pz) / agentCentroidDist;
    const agent_i_scaler =
      (agent_i.invmass / (agent_i.invmass + agent_j.invmass)) * agentDist;
    const agent_j_scaler =
      (agent_j.invmass / (agent_i.invmass + agent_j.invmass)) * agentDist;
    if (agentDist < 0) {
      agent_i.px += agent_i_scaler * dir_x;
      agent_i.pz += agent_i_scaler * dir_z;
      agent_j.px += -agent_j_scaler * dir_x;
      agent_j.pz += -agent_j_scaler * dir_z;
    }
  }

  function agentVelocityPlanner() {
    sceneEntities.forEach(function (agent_i) {
      const distToGoal = distance(
        agent_i.x,
        agent_i.z,
        agent_i.goal_x,
        agent_i.goal_z
      );
      if (distToGoal > RADIUS) {
        const dir_x = (agent_i.goal_x - agent_i.x) / distToGoal;
        const dir_z = (agent_i.goal_z - agent_i.z) / distToGoal;
        agent_i.vx = agent_i.v_pref * dir_x;
        agent_i.vz = agent_i.v_pref * dir_z;
      }
      agent_i.vx = 0.9999 * agent_i.vx;
      agent_i.vz = 0.9999 * agent_i.vz;
    });
  }

  /*  -----------------------  */

  agentVelocityPlanner();

  sceneEntities.forEach(function (item) {
    item.px = item.x + timestep * item.vx;
    item.pz = item.z + timestep * item.vz;
    item.py = item.y + timestep * item.vy;
  });

  let pbdIters = 0;
  let isColliding;
  var agent_a,
    agent_b,
    desDistance,
    i,
    j,
    idx = 0;

  while (pbdIters < ITERNUM) {
    idx = 0;
    while (idx < world.distanceConstraints.length) {
      desDistance = world.distanceConstraints[idx].distance;
      agent_a = sceneEntities[world.distanceConstraints[idx].idx_a];
      agent_b = sceneEntities[world.distanceConstraints[idx].idx_b];
      //distanceConstraint(agent_a,agent_b, desDistance);
      idx += 1;
    }
    i = 0;
    while (i < sceneEntities.length) {
      j = i + 1;
      while (j < sceneEntities.length) {
        //collisionConstraint(sceneEntities[i],sceneEntities[j])
        const iCoords = rotateLineSegment(
          sceneEntities[i].x,
          sceneEntities[i].z - agentLength,
          sceneEntities[i].x,
          sceneEntities[i].z + agentLength,
          sceneEntities[i].z
        );
        const jCoords = rotateLineSegment(
          sceneEntities[j].x,
          sceneEntities[j].z - agentLength,
          sceneEntities[j].x,
          sceneEntities[j].z + agentLength,
          sceneEntities[j].z
        );

        // collisions from pdf/website
        // Agent A
        const a = {
          tip: new THREE.Vector2(iCoords[0], iCoords[1]),
          base: new THREE.Vector2(iCoords[2], iCoords[3]),
          radius: RADIUS,
        };
        // Agent B
        const b = {
          tip: new THREE.Vector2(jCoords[0], jCoords[1]),
          base: new THREE.Vector2(jCoords[2], jCoords[3]),
          radius: RADIUS,
        };

        // capsule A:
        const a_Normal = a.tip
          .clone()
          .normalize()
          .sub(a.base.clone().normalize());
        const a_LineEndOffset = a_Normal.clone().multiplyScalar(a.radius);
        const a_A = a.base.clone().add(a_LineEndOffset);
        const a_B = a.tip.clone().sub(a_LineEndOffset);

        // capsule B:
        const b_Normal = b.tip
          .clone()
          .normalize()
          .sub(b.base.clone().normalize());
        const b_LineEndOffset = b_Normal.clone().multiplyScalar(b.radius);
        const b_A = b.base.clone().add(b_LineEndOffset);
        const b_B = b.tip.clone().add(b_LineEndOffset);

        // vectors between line endpoints:
        const v0 = b_A.clone().sub(a_A);
        const v1 = b_B.clone().sub(a_A);
        const v2 = b_A.clone().sub(a_B);
        const v3 = b_B.clone().sub(a_B);

        // squared distances:
        const d0 = v0.clone().dot(v0);
        const d1 = v1.clone().dot(v1);
        const d2 = v2.clone().dot(v2);
        const d3 = v3.clone().dot(v3);

        // select best potential endpoint on capsule A:
        let bestA;
        if (d2 < d0 || d2 < d1 || d3 < d0 || d3 < d1) {
          bestA = a_B;
        } else {
          bestA = a_A;
        }

        // select point on capsule B line segment nearest to best potential endpoint on A capsule:
        const bestB = ClosestPointOnLineSegment(b_A, b_B, bestA);

        // now do the same for capsule A segment:
        bestA = ClosestPointOnLineSegment(a_A, a_B, bestB);

        let penetration_normal = bestA.clone().sub(bestB);
        const len = penetration_normal.length();
        penetration_normal.divideScalar(len); // normalize
        const penetration_depth = a.radius + b.radius - len;
        const intersects = penetration_depth > 0;

        if (intersects) {
          sceneEntities[i].colliding = true;
          sceneEntities[j].colliding = true;

          sceneEntities[i].cvx = penetration_normal.x * 0.5 * penetration_depth;
          sceneEntities[i].cvz = penetration_normal.y * 0.5 * penetration_depth;

          sceneEntities[j].cvx =
            -1 * penetration_normal.x * 0.5 * penetration_depth;
          sceneEntities[j].cvz =
            -1 * penetration_normal.y * 0.5 * penetration_depth;
        }
        j += 1;
      }
      i += 1;
    }
    pbdIters += 1;
  }
  sceneEntities.forEach(function (item) {
    if (item.colliding) {
      item.x += item.cvx;
      item.z += item.cvz;
    } else {
      item.vx = (item.px - item.x) / timestep;
      item.vz = (item.pz - item.z) / timestep;
      item.vy = (item.py - item.y) / timestep;
      item.x = item.px;
      item.z = item.pz;
      item.y = item.py;
    }

    if (item.x < -world.x / 2) {
      item.x = -world.x / 2;
    } else if (item.x > world.x / 2) {
      item.x = world.x / 2;
    }
    if (item.z < -world.z / 2) {
      item.z = -world.z / 2;
    } else if (item.z > world.z / 2) {
      item.z = world.z / 2;
    }
  });
}
